sqlConnString <- "Driver=SQL Server;Server=srramsql1.southcentralus.cloudapp.azure.com; Database=demo;Uid=srramadmin;Pwd=Lz8oq1dn$Lz1" sqlDS <- RxSqlServerData(connectionString = sqlConnString,    table = Trainingdataset,    rowsPerRead = 5000) rxGetVarInfo(data = sqlDS)
   rowsPerRead = 5000)
sqlConnString <- "Driver=SQL Server;Server=srramsql1.southcentralus.cloudapp.azure.com; Database=demo;Uid=srramadmin;Pwd=Lz8oq1dn$Lz1" sqlDS <- RxSqlServerData(connectionString = sqlConnString, table = Trainingdataset,rowsPerRead = 5000) rxGetVarInfo(data = sqlDS)
sqlDS <- RxSqlServerData(connectionString = sqlConnString, table = "Trainingdataset",rowsPerRead = 5000)
rxGetVarInfo(data = sqlDS)
sqlDS <- RxSqlServerData(connectionString = sqlConnString,      table = "Trainingdataset", rowsPerRead = 5000)
rxGetVarInfo(data = sqlDS)
summary(sqlDS)
sqlQuery <-  "SELECT cast([horizon] as integer) as horizon ,cast([ID1] as integer) as ID1 ,cast([ID2] as integer) as ID2 ,CAST([time] as Date) AS tstamp  ,CAST([value] as decimal(12,8)) AS value ,CAST([RDPI] as decimal(12,1)) AS RDPI ,CAST([year] as integer) as year ,cast([month] as integer) as month ,cast([weekofmonth] as integer) as weekofmonth ,cast([weekofyear] as integer) as weekofyear ,CASE WHEN [USNewYearsDay] = 'False' THEN 0 ELSE 1 END AS USNewYearsDay ,CASE WHEN [USLaborDay] = 'False' THEN 0 ELSE 1 END AS USLaborDay ,CASE WHEN [USThanksgivingDay] = 'False' THEN 0 ELSE 1 END AS USThanksgivingDay ,CASE WHEN [CyberMonday] = 'False' THEN 0 ELSE 1 END AS CyberMonday ,CASE WHEN [ChristmasDay] = 'False' THEN 0 ELSE 1 END AS ChristmasDay ,CAST(SUBSTRING(FreqCos1,1,15) as DECIMAL(15,13)) as FreqCos1 ,CAST(SUBSTRING(Freqsin1,1,15) as DECIMAL(15,13)) as Freqsin1 ,CAST(SUBSTRING(FreqCos2,1,15) as DECIMAL(15,13)) as FreqCos2 ,CAST(SUBSTRING(Freqsin2,1,15) as DECIMAL(15,13)) as Freqsin2 ,CAST(SUBSTRING(FreqCos3,1,15) as DECIMAL(15,13)) as FreqCos3 ,CAST(SUBSTRING(Freqsin3,1,15) as DECIMAL(15,13)) as Freqsin3 ,CAST(SUBSTRING(FreqCos4,1,15) as DECIMAL(15,13)) as FreqCos4 ,CAST(SUBSTRING(Freqsin4,1,15) as DECIMAL(15,13)) as Freqsin4 ,CAST([lag1] as DECIMAL(12,8)) as lag1 ,CAST([lag2] as DECIMAL(12,8)) as lag2 ,CAST([lag3] as DECIMAL(12,8)) as lag3 ,CAST([lag4] as DECIMAL(12,8)) as lag4 ,CAST([lag5] as DECIMAL(12,8)) as lag5 ,CAST([lag6] as DECIMAL(12,8)) as lag6 ,CAST([lag7] as DECIMAL(12,8)) as lag7 ,CAST([lag8] as DECIMAL(12,8)) as lag8 ,CAST([lag9] as DECIMAL(12,8)) as lag9 ,CAST([lag10] as DECIMAL(12,8)) as lag10 ,CAST([lag11] as DECIMAL(12,8)) as lag11 ,CAST([lag12] as DECIMAL(12,8)) as lag12 ,CAST([lag13] as DECIMAL(12,8)) as lag13 ,CAST([lag14] as DECIMAL(12,8)) as lag14 ,CAST([lag15] as DECIMAL(12,8)) as lag15 ,CAST([lag16] as DECIMAL(12,8)) as lag16 ,CAST([lag17] as DECIMAL(12,8)) as lag17 ,CAST([lag18] as DECIMAL(12,8)) as lag18 ,CAST([lag19] as DECIMAL(12,8)) as lag19 ,CAST([lag20] as DECIMAL(12,8)) as lag20 ,CAST([lag21] as DECIMAL(12,8)) as lag21 ,CAST([lag22] as DECIMAL(12,8)) as lag22 ,CAST([lag23] as DECIMAL(12,8)) as lag23 ,CAST([lag24] as DECIMAL(12,8)) as lag24 ,CAST([lag25] as DECIMAL(12,8)) as lag25 ,CAST([lag26] as DECIMAL(12,8)) as lag26 FROM [demo].[dbo].[Trainingdataset] WHERE ID1 = 2 and ID2 = 1"
RxSqlServerData(sqlQuery = query,    connectionString = sqlConnString, rowsPerRead = 5000)
Query <-  "SELECT cast([horizon] as integer) as horizon ,cast([ID1] as integer) as ID1 ,cast([ID2] as integer) as ID2 ,CAST([time] as Date) AS tstamp  ,CAST([value] as decimal(12,8)) AS value ,CAST([RDPI] as decimal(12,1)) AS RDPI ,CAST([year] as integer) as year ,cast([month] as integer) as month ,cast([weekofmonth] as integer) as weekofmonth ,cast([weekofyear] as integer) as weekofyear ,CASE WHEN [USNewYearsDay] = 'False' THEN 0 ELSE 1 END AS USNewYearsDay ,CASE WHEN [USLaborDay] = 'False' THEN 0 ELSE 1 END AS USLaborDay ,CASE WHEN [USThanksgivingDay] = 'False' THEN 0 ELSE 1 END AS USThanksgivingDay ,CASE WHEN [CyberMonday] = 'False' THEN 0 ELSE 1 END AS CyberMonday ,CASE WHEN [ChristmasDay] = 'False' THEN 0 ELSE 1 END AS ChristmasDay ,CAST(SUBSTRING(FreqCos1,1,15) as DECIMAL(15,13)) as FreqCos1 ,CAST(SUBSTRING(Freqsin1,1,15) as DECIMAL(15,13)) as Freqsin1 ,CAST(SUBSTRING(FreqCos2,1,15) as DECIMAL(15,13)) as FreqCos2 ,CAST(SUBSTRING(Freqsin2,1,15) as DECIMAL(15,13)) as Freqsin2 ,CAST(SUBSTRING(FreqCos3,1,15) as DECIMAL(15,13)) as FreqCos3 ,CAST(SUBSTRING(Freqsin3,1,15) as DECIMAL(15,13)) as Freqsin3 ,CAST(SUBSTRING(FreqCos4,1,15) as DECIMAL(15,13)) as FreqCos4 ,CAST(SUBSTRING(Freqsin4,1,15) as DECIMAL(15,13)) as Freqsin4 ,CAST([lag1] as DECIMAL(12,8)) as lag1 ,CAST([lag2] as DECIMAL(12,8)) as lag2 ,CAST([lag3] as DECIMAL(12,8)) as lag3 ,CAST([lag4] as DECIMAL(12,8)) as lag4 ,CAST([lag5] as DECIMAL(12,8)) as lag5 ,CAST([lag6] as DECIMAL(12,8)) as lag6 ,CAST([lag7] as DECIMAL(12,8)) as lag7 ,CAST([lag8] as DECIMAL(12,8)) as lag8 ,CAST([lag9] as DECIMAL(12,8)) as lag9 ,CAST([lag10] as DECIMAL(12,8)) as lag10 ,CAST([lag11] as DECIMAL(12,8)) as lag11 ,CAST([lag12] as DECIMAL(12,8)) as lag12 ,CAST([lag13] as DECIMAL(12,8)) as lag13 ,CAST([lag14] as DECIMAL(12,8)) as lag14 ,CAST([lag15] as DECIMAL(12,8)) as lag15 ,CAST([lag16] as DECIMAL(12,8)) as lag16 ,CAST([lag17] as DECIMAL(12,8)) as lag17 ,CAST([lag18] as DECIMAL(12,8)) as lag18 ,CAST([lag19] as DECIMAL(12,8)) as lag19 ,CAST([lag20] as DECIMAL(12,8)) as lag20 ,CAST([lag21] as DECIMAL(12,8)) as lag21 ,CAST([lag22] as DECIMAL(12,8)) as lag22 ,CAST([lag23] as DECIMAL(12,8)) as lag23 ,CAST([lag24] as DECIMAL(12,8)) as lag24 ,CAST([lag25] as DECIMAL(12,8)) as lag25 ,CAST([lag26] as DECIMAL(12,8)) as lag26 FROM [demo].[dbo].[Trainingdataset] WHERE ID1 = 2 and ID2 = 1"
RxSqlServerData(sqlQuery = Query,    connectionString = sqlConnString, rowsPerRead = 5000)
sqlDSTransformed <- RxSqlServerData(sqlQuery = Query,    connectionString = sqlConnString, rowsPerRead = 5000)
rxGetVarInfo(data = sqlDSTransformed)
rxImport(sqlDSTransformed)
trainingdata <- rxImport(sqlDSTransformed)
sqlConnString <- "Driver=SQL Server;Server=srramsql1.southcentralus.cloudapp.azure.com; Database=demo;Uid=srramadmin;Pwd=Lz8oq1dn$Lz1" sqlDS <- RxSqlServerData(connectionString = sqlConnString,      table = "Trainingdataset", rowsPerRead = 5000) rxGetVarInfo(data = sqlDS) Query <-  "SELECT cast([horizon] as integer) as horizon ,cast([ID1] as integer) as ID1 ,cast([ID2] as integer) as ID2 ,CAST([time] as Date) AS tstamp  ,CAST([value] as decimal(12,8)) AS value ,CAST([RDPI] as decimal(12,1)) AS RDPI ,CAST([year] as integer) as year ,cast([month] as integer) as month ,cast([weekofmonth] as integer) as weekofmonth ,cast([weekofyear] as integer) as weekofyear ,CASE WHEN [USNewYearsDay] = 'False' THEN 0 ELSE 1 END AS USNewYearsDay ,CASE WHEN [USLaborDay] = 'False' THEN 0 ELSE 1 END AS USLaborDay ,CASE WHEN [USThanksgivingDay] = 'False' THEN 0 ELSE 1 END AS USThanksgivingDay ,CASE WHEN [CyberMonday] = 'False' THEN 0 ELSE 1 END AS CyberMonday ,CASE WHEN [ChristmasDay] = 'False' THEN 0 ELSE 1 END AS ChristmasDay ,CAST(SUBSTRING(FreqCos1,1,15) as DECIMAL(15,13)) as FreqCos1 ,CAST(SUBSTRING(Freqsin1,1,15) as DECIMAL(15,13)) as Freqsin1 ,CAST(SUBSTRING(FreqCos2,1,15) as DECIMAL(15,13)) as FreqCos2 ,CAST(SUBSTRING(Freqsin2,1,15) as DECIMAL(15,13)) as Freqsin2 ,CAST(SUBSTRING(FreqCos3,1,15) as DECIMAL(15,13)) as FreqCos3 ,CAST(SUBSTRING(Freqsin3,1,15) as DECIMAL(15,13)) as Freqsin3 ,CAST(SUBSTRING(FreqCos4,1,15) as DECIMAL(15,13)) as FreqCos4 ,CAST(SUBSTRING(Freqsin4,1,15) as DECIMAL(15,13)) as Freqsin4 ,CAST([lag1] as DECIMAL(12,8)) as lag1 ,CAST([lag2] as DECIMAL(12,8)) as lag2 ,CAST([lag3] as DECIMAL(12,8)) as lag3 ,CAST([lag4] as DECIMAL(12,8)) as lag4 ,CAST([lag5] as DECIMAL(12,8)) as lag5 ,CAST([lag6] as DECIMAL(12,8)) as lag6 ,CAST([lag7] as DECIMAL(12,8)) as lag7 ,CAST([lag8] as DECIMAL(12,8)) as lag8 ,CAST([lag9] as DECIMAL(12,8)) as lag9 ,CAST([lag10] as DECIMAL(12,8)) as lag10 ,CAST([lag11] as DECIMAL(12,8)) as lag11 ,CAST([lag12] as DECIMAL(12,8)) as lag12 ,CAST([lag13] as DECIMAL(12,8)) as lag13 ,CAST([lag14] as DECIMAL(12,8)) as lag14 ,CAST([lag15] as DECIMAL(12,8)) as lag15 ,CAST([lag16] as DECIMAL(12,8)) as lag16 ,CAST([lag17] as DECIMAL(12,8)) as lag17 ,CAST([lag18] as DECIMAL(12,8)) as lag18 ,CAST([lag19] as DECIMAL(12,8)) as lag19 ,CAST([lag20] as DECIMAL(12,8)) as lag20 ,CAST([lag21] as DECIMAL(12,8)) as lag21 ,CAST([lag22] as DECIMAL(12,8)) as lag22 ,CAST([lag23] as DECIMAL(12,8)) as lag23 ,CAST([lag24] as DECIMAL(12,8)) as lag24 ,CAST([lag25] as DECIMAL(12,8)) as lag25 ,CAST([lag26] as DECIMAL(12,8)) as lag26 FROM [demo].[dbo].[Trainingdataset] WHERE ID1 = 2 and ID2 = 1" sqlDSTransformed <- RxSqlServerData(sqlQuery = Query,    connectionString = sqlConnString, rowsPerRead = 5000) rxGetVarInfo(data = sqlDSTransformed) trainingdata <- rxImport(sqlDSTransformed)
head(trainingdata)
rxSummary( ~ ., data = trainingdata)
DforestModelObj <- rxDForest(value ~ RDPI + year + month + weekofmonth + weekofyear + lag1 + lag2 + lag3 + Freqcos1 + Freqsin1, data = trainingdata)
DforestModelObj <- rxDForest(value ~ RDPI + year + month + weekofmonth + weekofyear + lag1 + lag2 + lag3 + FreqCos1 + Freqsin1, data = trainingdata)
summary(DforestModelObj)
DforestModelObj$ntree
DforestModelObj$forest
summary(DforestModelObj)
DforestModelObj$formula
DforestModelObj$oob.err
DforestModelObj$params
DforestModelObj <- rxDForest(value ~ RDPI + year + month + weekofmonth +     weekofyear + USNewYearsDay +     USLaborDay + USThanksgivingDay + CyberMonday + ChristmasDay +     FreqCos1 + Freqsin1 + FreqCos2 + Freqsin2 + FreqCos3 + Freqsin3 + FreqCos4 + Freqsin4 +     lag1 + lag2 + lag3 + lag4 + lag5 + lag6 + lag7 + lag8 + lag9 + lag10 +     lag11 + lag12 + lag13 + lag14 + lag15 + lag16 + lag17 + lag18 + lag19 + lag20 +     lag21 + lag22 + lag23 + lag24 + lag25 + lag26 ,data = trainingdata) summary(DforestModelObj)
QueryTst <- "SELECT  cast([horizon] as integer) as horizon ,cast([ID1] as integer) as ID1 ,cast([ID2] as integer) as ID2 ,CAST([time] as Date) AS tstamp  ,CAST(value as decimal(12,10)) AS value ,CAST([RDPI] as decimal(12,1)) AS RDPI ,CAST([year] as integer) as year ,cast([month] as integer) as month ,cast([weekofmonth] as integer) as weekofmonth ,cast([weekofyear] as integer) as weekofyear ,CASE WHEN [USNewYearsDay] = 'False' THEN 0 ELSE 1 END AS USNewYearsDay ,CASE WHEN [USLaborDay] = 'False' THEN 0 ELSE 1 END AS USLaborDay ,CASE WHEN [USThanksgivingDay] = 'False' THEN 0 ELSE 1 END AS USThanksgivingDay ,CASE WHEN [CyberMonday] = 'False' THEN 0 ELSE 1 END AS CyberMonday ,CASE WHEN [ChristmasDay] = 'False' THEN 0 ELSE 1 END AS ChristmasDay ,CAST(SUBSTRING(FreqCos1,1,15) as DECIMAL(15,13)) as FreqCos1 ,CAST(SUBSTRING(Freqsin1,1,15) as DECIMAL(15,13)) as Freqsin1 ,CAST(SUBSTRING(FreqCos2,1,15) as DECIMAL(15,13)) as FreqCos2 ,CAST(SUBSTRING(Freqsin2,1,15) as DECIMAL(15,13)) as Freqsin2 ,CAST(SUBSTRING(FreqCos3,1,15) as DECIMAL(15,13)) as FreqCos3 ,CAST(SUBSTRING(Freqsin3,1,15) as DECIMAL(15,13)) as Freqsin3 ,CAST(SUBSTRING(FreqCos4,1,15) as DECIMAL(15,13)) as FreqCos4 ,CAST(SUBSTRING(Freqsin4,1,15) as DECIMAL(15,13)) as Freqsin4 ,CAST([lag1] as DECIMAL(12,8)) as lag1 ,CAST([lag2] as DECIMAL(12,8)) as lag2 ,CAST([lag3] as DECIMAL(12,8)) as lag3 ,CAST([lag4] as DECIMAL(12,8)) as lag4 ,CAST([lag5] as DECIMAL(12,8)) as lag5 ,CAST([lag6] as DECIMAL(12,8)) as lag6 ,CAST([lag7] as DECIMAL(12,8)) as lag7 ,CAST([lag8] as DECIMAL(12,8)) as lag8 ,CAST([lag9] as DECIMAL(12,8)) as lag9 ,CAST([lag10] as DECIMAL(12,8)) as lag10 ,CAST([lag11] as DECIMAL(12,8)) as lag11 ,CAST([lag12] as DECIMAL(12,8)) as lag12 ,CAST([lag13] as DECIMAL(12,8)) as lag13 ,CAST([lag14] as DECIMAL(12,8)) as lag14 ,CAST([lag15] as DECIMAL(12,8)) as lag15 ,CAST([lag16] as DECIMAL(12,8)) as lag16 ,CAST([lag17] as DECIMAL(12,8)) as lag17 ,CAST([lag18] as DECIMAL(12,8)) as lag18 ,CAST([lag19] as DECIMAL(12,8)) as lag19 ,CAST([lag20] as DECIMAL(12,8)) as lag20 ,CAST([lag21] as DECIMAL(12,8)) as lag21 ,CAST([lag22] as DECIMAL(12,8)) as lag22 ,CAST([lag23] as DECIMAL(12,8)) as lag23 ,CAST([lag24] as DECIMAL(12,8)) as lag24 ,CAST([lag25] as DECIMAL(12,8)) as lag25 ,CAST([lag26] as DECIMAL(12,8)) as lag26 FROM [demo].[dbo].[testingdataset] WHERE ID1 = 2 and ID2 = 1 and value <> ''; "
sqlDSTest <- RxSqlServerData(sqlQuery = QueryTst,             connectionString = sqlConnString, rowsPerRead = 5000)
rxGetVarInfo(data = sqlDSTest)
testdata <- rxImport(sqlDSTest)
head(testdata)
rxPredict(modelObject = DforestModelObj,         data = testdata,         predVarNames = "DforestScore",           type = "link",         writeModelVars = TRUE,         extraVarsToWrite = "time,value",         overwrite = TRUE)
rxPredict(modelObject = DforestModelObj,         data = testdata,         predVarNames = "DforestScore",           type = "response",         writeModelVars = TRUE,         extraVarsToWrite = "time,value",         overwrite = TRUE)
rxPredict(modelObject = DforestModelObj,             data = testdata,             predVarNames = "DforestScore",             type = "response",             writeModelVars = TRUE,             extraVarsToWrite = c("time","value"),             overwrite = TRUE)
rxPredict.rxDForest(modelObject = DforestModelObj,             data = testdata)
DforestModelObj
rxPredict(modelObject = DforestModelObj,             data = testdata,             predVarNames = "DforestScore",             type = "response",             writeModelVars = FALSE,             computeResiduals = TRUE,             extraVarsToWrite = c("time","value"),             overwrite = TRUE)
xPredict(modelObject = DforestModelObj,             data = testdata,             predVarNames = "DforestScore",             type = "response",             writeModelVars = FALSE,             computeResiduals = TRUE,             extraVarsToWrite = c("tstamp","value"),             overwrite = TRUE)
rxPredict(modelObject = DforestModelObj,             data = testdata,             predVarNames = "DforestScore",             type = "response",             writeModelVars = FALSE,             computeResiduals = TRUE,             extraVarsToWrite = c("tstamp","value"),             overwrite = TRUE)
predictionoutput <- rxPredict(modelObject = DforestModelObj,             data = testdata,             predVarNames = "DforestScore",             type = "response",             writeModelVars = FALSE,             computeResiduals = TRUE,             extraVarsToWrite = c("tstamp","value"),             overwrite = TRUE)
exp(predictionoutput$value_Resid)
predictionoutput
 c(exp(predictionoutput$DforestScore), exp(predictionoutput$DforestScore), exp(predictionoutput$value_Resid))
as.data.frame(exp(predictionoutput$DforestScore), exp(predictionoutput$DforestScore), exp(predictionoutput$value_Resid))
cbind(exp(predictionoutput$DforestScore), exp(predictionoutput$DforestScore), exp(predictionoutput$value_Resid))
cbind(exp(predictionoutput$DforestScore), exp(predictionoutput$value), exp(predictionoutput$value_Resid))
cbind(exp(predictionoutput$DforestScore), exp(predictionoutput$value))
Sys.getenv("USERNAME"),
Sys.getenv("USERNAME")
paste("C:\\Users\\srram\\Documents\\AllShare\\", Sys.getenv("USERNAME"), sep = "")
sqlConnString <- "Driver=SQL Server;Server=srramsql1.southcentralus.cloudapp.azure.com; Database=demo;Uid=srramadmin;Pwd=Lz8oq1dn$Lz1" sqlWait <- TRUE sqlConsoleOutput <- FALSE sqlShareDir <- paste("C:\\Users\\srram\\Documents\\AllShare\\", Sys.getenv("USERNAME"), sep = "") ## Add this line to create directory if it does not exist dir.create(sqlShareDir, recursive = TRUE)
sqlComputeTrace <- RxInSqlServer(     connectionString = sqlConnString,     shareDir = sqlShareDir,       wait = sqlWait,     consoleOutput = sqlConsoleOutput,     traceEnabled = TRUE,     traceLevel = 7)
rxSetComputeContext(sqlComputeTrace)
Query <- "SELECT cast([horizon] as integer) as horizon ,cast([ID1] as integer) as ID1 ,cast([ID2] as integer) as ID2 ,CAST([time] as Date) AS tstamp  ,CAST([value] as decimal(12,8)) AS value ,CAST([RDPI] as decimal(12,1)) AS RDPI ,CAST([year] as integer) as year ,cast([month] as integer) as month ,cast([weekofmonth] as integer) as weekofmonth ,cast([weekofyear] as integer) as weekofyear ,CASE WHEN [USNewYearsDay] = 'False' THEN 0 ELSE 1 END AS USNewYearsDay ,CASE WHEN [USLaborDay] = 'False' THEN 0 ELSE 1 END AS USLaborDay ,CASE WHEN [USThanksgivingDay] = 'False' THEN 0 ELSE 1 END AS USThanksgivingDay ,CASE WHEN [CyberMonday] = 'False' THEN 0 ELSE 1 END AS CyberMonday ,CASE WHEN [ChristmasDay] = 'False' THEN 0 ELSE 1 END AS ChristmasDay ,CAST(SUBSTRING(FreqCos1,1,15) as DECIMAL(15,13)) as FreqCos1 ,CAST(SUBSTRING(Freqsin1,1,15) as DECIMAL(15,13)) as Freqsin1 ,CAST(SUBSTRING(FreqCos2,1,15) as DECIMAL(15,13)) as FreqCos2 ,CAST(SUBSTRING(Freqsin2,1,15) as DECIMAL(15,13)) as Freqsin2 ,CAST(SUBSTRING(FreqCos3,1,15) as DECIMAL(15,13)) as FreqCos3 ,CAST(SUBSTRING(Freqsin3,1,15) as DECIMAL(15,13)) as Freqsin3 ,CAST(SUBSTRING(FreqCos4,1,15) as DECIMAL(15,13)) as FreqCos4 ,CAST(SUBSTRING(Freqsin4,1,15) as DECIMAL(15,13)) as Freqsin4 ,CAST([lag1] as DECIMAL(12,8)) as lag1 ,CAST([lag2] as DECIMAL(12,8)) as lag2 ,CAST([lag3] as DECIMAL(12,8)) as lag3 ,CAST([lag4] as DECIMAL(12,8)) as lag4 ,CAST([lag5] as DECIMAL(12,8)) as lag5 ,CAST([lag6] as DECIMAL(12,8)) as lag6 ,CAST([lag7] as DECIMAL(12,8)) as lag7 ,CAST([lag8] as DECIMAL(12,8)) as lag8 ,CAST([lag9] as DECIMAL(12,8)) as lag9 ,CAST([lag10] as DECIMAL(12,8)) as lag10 ,CAST([lag11] as DECIMAL(12,8)) as lag11 ,CAST([lag12] as DECIMAL(12,8)) as lag12 ,CAST([lag13] as DECIMAL(12,8)) as lag13 ,CAST([lag14] as DECIMAL(12,8)) as lag14 ,CAST([lag15] as DECIMAL(12,8)) as lag15 ,CAST([lag16] as DECIMAL(12,8)) as lag16 ,CAST([lag17] as DECIMAL(12,8)) as lag17 ,CAST([lag18] as DECIMAL(12,8)) as lag18 ,CAST([lag19] as DECIMAL(12,8)) as lag19 ,CAST([lag20] as DECIMAL(12,8)) as lag20 ,CAST([lag21] as DECIMAL(12,8)) as lag21 ,CAST([lag22] as DECIMAL(12,8)) as lag22 ,CAST([lag23] as DECIMAL(12,8)) as lag23 ,CAST([lag24] as DECIMAL(12,8)) as lag24 ,CAST([lag25] as DECIMAL(12,8)) as lag25 ,CAST([lag26] as DECIMAL(12,8)) as lag26 FROM [demo].[dbo].[Trainingdataset] WHERE ID1 = 2 and ID2 = 1 " sqlDSTransformed <- RxSqlServerData(sqlQuery = Query,    connectionString = sqlConnString, rowsPerRead = 5000)
rxSummary(time ~ lag1, data = sqlDSTransformed)
#### Create a remote compute Context#### sqlConnString <- "Driver=SQL Server;Server=srramsql1.southcentralus.cloudapp.azure.com; Database=demo;Uid=srramadmin;Pwd=Lz8oq1dn$Lz1" sqlWait <- TRUE sqlConsoleOutput <- FALSE sqlShareDir <- paste("C:\\Users\\srram\\Documents\\AllShare\\", Sys.getenv("USERNAME"), sep = "") ## Add this line to create directory if it does not exist dir.create(sqlShareDir, recursive = TRUE) sqlComputeTrace <- RxInSqlServer(     connectionString = sqlConnString,     shareDir = sqlShareDir,       wait = sqlWait,     consoleOutput = sqlConsoleOutput,     traceEnabled = TRUE,     traceLevel = 7) rxSetComputeContext(sqlComputeTrace) Query <- "SELECT cast([horizon] as integer) as horizon ,cast([ID1] as integer) as ID1 ,cast([ID2] as integer) as ID2 ,CAST([time] as Date) AS tstamp  ,CAST([value] as decimal(12,8)) AS value ,CAST([RDPI] as decimal(12,1)) AS RDPI ,CAST([year] as integer) as year ,cast([month] as integer) as month ,cast([weekofmonth] as integer) as weekofmonth ,cast([weekofyear] as integer) as weekofyear ,CASE WHEN [USNewYearsDay] = 'False' THEN 0 ELSE 1 END AS USNewYearsDay ,CASE WHEN [USLaborDay] = 'False' THEN 0 ELSE 1 END AS USLaborDay ,CASE WHEN [USThanksgivingDay] = 'False' THEN 0 ELSE 1 END AS USThanksgivingDay ,CASE WHEN [CyberMonday] = 'False' THEN 0 ELSE 1 END AS CyberMonday ,CASE WHEN [ChristmasDay] = 'False' THEN 0 ELSE 1 END AS ChristmasDay ,CAST(SUBSTRING(FreqCos1,1,15) as DECIMAL(15,13)) as FreqCos1 ,CAST(SUBSTRING(Freqsin1,1,15) as DECIMAL(15,13)) as Freqsin1 ,CAST(SUBSTRING(FreqCos2,1,15) as DECIMAL(15,13)) as FreqCos2 ,CAST(SUBSTRING(Freqsin2,1,15) as DECIMAL(15,13)) as Freqsin2 ,CAST(SUBSTRING(FreqCos3,1,15) as DECIMAL(15,13)) as FreqCos3 ,CAST(SUBSTRING(Freqsin3,1,15) as DECIMAL(15,13)) as Freqsin3 ,CAST(SUBSTRING(FreqCos4,1,15) as DECIMAL(15,13)) as FreqCos4 ,CAST(SUBSTRING(Freqsin4,1,15) as DECIMAL(15,13)) as Freqsin4 ,CAST([lag1] as DECIMAL(12,8)) as lag1 ,CAST([lag2] as DECIMAL(12,8)) as lag2 ,CAST([lag3] as DECIMAL(12,8)) as lag3 ,CAST([lag4] as DECIMAL(12,8)) as lag4 ,CAST([lag5] as DECIMAL(12,8)) as lag5 ,CAST([lag6] as DECIMAL(12,8)) as lag6 ,CAST([lag7] as DECIMAL(12,8)) as lag7 ,CAST([lag8] as DECIMAL(12,8)) as lag8 ,CAST([lag9] as DECIMAL(12,8)) as lag9 ,CAST([lag10] as DECIMAL(12,8)) as lag10 ,CAST([lag11] as DECIMAL(12,8)) as lag11 ,CAST([lag12] as DECIMAL(12,8)) as lag12 ,CAST([lag13] as DECIMAL(12,8)) as lag13 ,CAST([lag14] as DECIMAL(12,8)) as lag14 ,CAST([lag15] as DECIMAL(12,8)) as lag15 ,CAST([lag16] as DECIMAL(12,8)) as lag16 ,CAST([lag17] as DECIMAL(12,8)) as lag17 ,CAST([lag18] as DECIMAL(12,8)) as lag18 ,CAST([lag19] as DECIMAL(12,8)) as lag19 ,CAST([lag20] as DECIMAL(12,8)) as lag20 ,CAST([lag21] as DECIMAL(12,8)) as lag21 ,CAST([lag22] as DECIMAL(12,8)) as lag22 ,CAST([lag23] as DECIMAL(12,8)) as lag23 ,CAST([lag24] as DECIMAL(12,8)) as lag24 ,CAST([lag25] as DECIMAL(12,8)) as lag25 ,CAST([lag26] as DECIMAL(12,8)) as lag26 FROM [demo].[dbo].[Trainingdataset] WHERE ID1 = 2 and ID2 = 1 " sqlDSTransformed <- RxSqlServerData(sqlQuery = Query,    connectionString = sqlConnString, rowsPerRead = 5000)
rxSummary(time ~ lag1, data = sqlDSTransformed)
rxSummary(tstamp ~ lag1, data = sqlDSTransformed)
rxSummary( ~ ., data = sqlDSTransformed)
DforestModelObj <- rxDForest(value ~ RDPI + year + month + weekofmonth +     weekofyear + USNewYearsDay +     USLaborDay + USThanksgivingDay + CyberMonday + ChristmasDay +     FreqCos1 + Freqsin1 + FreqCos2 + Freqsin2 + FreqCos3 + Freqsin3 + FreqCos4 + Freqsin4 +     lag1 + lag2 + lag3 + lag4 + lag5 + lag6 + lag7 + lag8 + lag9 + lag10 +     lag11 + lag12 + lag13 + lag14 + lag15 + lag16 + lag17 + lag18 + lag19 + lag20 +     lag21 + lag22 + lag23 + lag24 + lag25 + lag26, data = sqlDSTransformed)
DforestModelObj
QueryTst <- "SELECT  cast([horizon] as integer) as horizon ,cast([ID1] as integer) as ID1 ,cast([ID2] as integer) as ID2 ,CAST([time] as Date) AS tstamp  ,CAST(value as decimal(12,10)) AS value ,CAST([RDPI] as decimal(12,1)) AS RDPI ,CAST([year] as integer) as year ,cast([month] as integer) as month ,cast([weekofmonth] as integer) as weekofmonth ,cast([weekofyear] as integer) as weekofyear ,CASE WHEN [USNewYearsDay] = 'False' THEN 0 ELSE 1 END AS USNewYearsDay ,CASE WHEN [USLaborDay] = 'False' THEN 0 ELSE 1 END AS USLaborDay ,CASE WHEN [USThanksgivingDay] = 'False' THEN 0 ELSE 1 END AS USThanksgivingDay ,CASE WHEN [CyberMonday] = 'False' THEN 0 ELSE 1 END AS CyberMonday ,CASE WHEN [ChristmasDay] = 'False' THEN 0 ELSE 1 END AS ChristmasDay ,CAST(SUBSTRING(FreqCos1,1,15) as DECIMAL(15,13)) as FreqCos1 ,CAST(SUBSTRING(Freqsin1,1,15) as DECIMAL(15,13)) as Freqsin1 ,CAST(SUBSTRING(FreqCos2,1,15) as DECIMAL(15,13)) as FreqCos2 ,CAST(SUBSTRING(Freqsin2,1,15) as DECIMAL(15,13)) as Freqsin2 ,CAST(SUBSTRING(FreqCos3,1,15) as DECIMAL(15,13)) as FreqCos3 ,CAST(SUBSTRING(Freqsin3,1,15) as DECIMAL(15,13)) as Freqsin3 ,CAST(SUBSTRING(FreqCos4,1,15) as DECIMAL(15,13)) as FreqCos4 ,CAST(SUBSTRING(Freqsin4,1,15) as DECIMAL(15,13)) as Freqsin4 ,CAST([lag1] as DECIMAL(12,8)) as lag1 ,CAST([lag2] as DECIMAL(12,8)) as lag2 ,CAST([lag3] as DECIMAL(12,8)) as lag3 ,CAST([lag4] as DECIMAL(12,8)) as lag4 ,CAST([lag5] as DECIMAL(12,8)) as lag5 ,CAST([lag6] as DECIMAL(12,8)) as lag6 ,CAST([lag7] as DECIMAL(12,8)) as lag7 ,CAST([lag8] as DECIMAL(12,8)) as lag8 ,CAST([lag9] as DECIMAL(12,8)) as lag9 ,CAST([lag10] as DECIMAL(12,8)) as lag10 ,CAST([lag11] as DECIMAL(12,8)) as lag11 ,CAST([lag12] as DECIMAL(12,8)) as lag12 ,CAST([lag13] as DECIMAL(12,8)) as lag13 ,CAST([lag14] as DECIMAL(12,8)) as lag14 ,CAST([lag15] as DECIMAL(12,8)) as lag15 ,CAST([lag16] as DECIMAL(12,8)) as lag16 ,CAST([lag17] as DECIMAL(12,8)) as lag17 ,CAST([lag18] as DECIMAL(12,8)) as lag18 ,CAST([lag19] as DECIMAL(12,8)) as lag19 ,CAST([lag20] as DECIMAL(12,8)) as lag20 ,CAST([lag21] as DECIMAL(12,8)) as lag21 ,CAST([lag22] as DECIMAL(12,8)) as lag22 ,CAST([lag23] as DECIMAL(12,8)) as lag23 ,CAST([lag24] as DECIMAL(12,8)) as lag24 ,CAST([lag25] as DECIMAL(12,8)) as lag25 ,CAST([lag26] as DECIMAL(12,8)) as lag26 FROM [demo].[dbo].[testingdataset] WHERE ID1 = 2 and ID2 = 1 and value <> ''; "
sqlDSTest <- RxSqlServerData(sqlQuery = QueryTst,             connectionString = sqlConnString, rowsPerRead = 5000) rxGetVarInfo(data = sqlDSTest)
rxPredict(modelObject = DforestModelObj,             data = sqlDSTest,             predVarNames = "DforestScore",             type = "response",             writeModelVars = FALSE,             computeResiduals = TRUE,             extraVarsToWrite = c("tstamp", "value"),             overwrite = TRUE)
sqlServerOutDS <- RxSqlServerData(table = "Predictions",     connectionString = sqlConnString,     rowsPerRead = 5000)
if (rxSqlServerTableExists("Predictions")) rxSqlServerDropTable("Predictions")
rxPredict(modelObject = DforestModelObj,             data = sqlDSTest,             outData = sqlServerOutDS,             predVarNames = "DforestScore",             type = "response",             writeModelVars = FALSE,             computeResiduals = TRUE,             extraVarsToWrite = c("tstamp", "value"),             overwrite = TRUE)
# @InputDataSet: input data frame, result of SQL query execution # @OutputDataSet: data frame to pass back to SQL # Test code # library(RODBC) # channel <- odbcDriverConnect(dbConnection) # InputDataSet <- sqlQuery(channel, ) # odbcClose(channel) #### Create a remote compute Context#### sqlConnString <- "Driver=SQL Server;Server=srramsql1.southcentralus.cloudapp.azure.com; Database=demo;Uid=srramadmin;Pwd=Lz8oq1dn$Lz1" sqlWait <- TRUE sqlConsoleOutput <- FALSE sqlShareDir <- paste("C:\\Users\\srram\\Documents\\AllShare\\", Sys.getenv("USERNAME"), sep = "") ## Add this line to create directory if it does not exist dir.create(sqlShareDir, recursive = TRUE) sqlComputeTrace <- RxInSqlServer(     connectionString = sqlConnString,     shareDir = sqlShareDir,     wait = sqlWait,     consoleOutput = sqlConsoleOutput,     traceEnabled = TRUE,     traceLevel = 7) rxSetComputeContext(sqlComputeTrace) Query <- "SELECT cast([horizon] as integer) as horizon ,cast([ID1] as integer) as ID1 ,cast([ID2] as integer) as ID2 ,CAST([time] as Date) AS tstamp  ,CAST([value] as decimal(12,8)) AS value ,CAST([RDPI] as decimal(12,1)) AS RDPI ,CAST([year] as integer) as year ,cast([month] as integer) as month ,cast([weekofmonth] as integer) as weekofmonth ,cast([weekofyear] as integer) as weekofyear ,CASE WHEN [USNewYearsDay] = 'False' THEN 0 ELSE 1 END AS USNewYearsDay ,CASE WHEN [USLaborDay] = 'False' THEN 0 ELSE 1 END AS USLaborDay ,CASE WHEN [USThanksgivingDay] = 'False' THEN 0 ELSE 1 END AS USThanksgivingDay ,CASE WHEN [CyberMonday] = 'False' THEN 0 ELSE 1 END AS CyberMonday ,CASE WHEN [ChristmasDay] = 'False' THEN 0 ELSE 1 END AS ChristmasDay ,CAST(SUBSTRING(FreqCos1,1,15) as DECIMAL(15,13)) as FreqCos1 ,CAST(SUBSTRING(Freqsin1,1,15) as DECIMAL(15,13)) as Freqsin1 ,CAST(SUBSTRING(FreqCos2,1,15) as DECIMAL(15,13)) as FreqCos2 ,CAST(SUBSTRING(Freqsin2,1,15) as DECIMAL(15,13)) as Freqsin2 ,CAST(SUBSTRING(FreqCos3,1,15) as DECIMAL(15,13)) as FreqCos3 ,CAST(SUBSTRING(Freqsin3,1,15) as DECIMAL(15,13)) as Freqsin3 ,CAST(SUBSTRING(FreqCos4,1,15) as DECIMAL(15,13)) as FreqCos4 ,CAST(SUBSTRING(Freqsin4,1,15) as DECIMAL(15,13)) as Freqsin4 ,CAST([lag1] as DECIMAL(12,8)) as lag1 ,CAST([lag2] as DECIMAL(12,8)) as lag2 ,CAST([lag3] as DECIMAL(12,8)) as lag3 ,CAST([lag4] as DECIMAL(12,8)) as lag4 ,CAST([lag5] as DECIMAL(12,8)) as lag5 ,CAST([lag6] as DECIMAL(12,8)) as lag6 ,CAST([lag7] as DECIMAL(12,8)) as lag7 ,CAST([lag8] as DECIMAL(12,8)) as lag8 ,CAST([lag9] as DECIMAL(12,8)) as lag9 ,CAST([lag10] as DECIMAL(12,8)) as lag10 ,CAST([lag11] as DECIMAL(12,8)) as lag11 ,CAST([lag12] as DECIMAL(12,8)) as lag12 ,CAST([lag13] as DECIMAL(12,8)) as lag13 ,CAST([lag14] as DECIMAL(12,8)) as lag14 ,CAST([lag15] as DECIMAL(12,8)) as lag15 ,CAST([lag16] as DECIMAL(12,8)) as lag16 ,CAST([lag17] as DECIMAL(12,8)) as lag17 ,CAST([lag18] as DECIMAL(12,8)) as lag18 ,CAST([lag19] as DECIMAL(12,8)) as lag19 ,CAST([lag20] as DECIMAL(12,8)) as lag20 ,CAST([lag21] as DECIMAL(12,8)) as lag21 ,CAST([lag22] as DECIMAL(12,8)) as lag22 ,CAST([lag23] as DECIMAL(12,8)) as lag23 ,CAST([lag24] as DECIMAL(12,8)) as lag24 ,CAST([lag25] as DECIMAL(12,8)) as lag25 ,CAST([lag26] as DECIMAL(12,8)) as lag26 FROM [demo].[dbo].[Trainingdataset] WHERE ID1 = 2 and ID2 = 1 " sqlDSTransformed <- RxSqlServerData(sqlQuery = Query,    connectionString = sqlConnString, rowsPerRead = 5000) DforestModelObj <- rxDForest(value ~ RDPI + year + month + weekofmonth +     weekofyear + USNewYearsDay +     USLaborDay + USThanksgivingDay + CyberMonday + ChristmasDay +     FreqCos1 + Freqsin1 + FreqCos2 + Freqsin2 + FreqCos3 + Freqsin3 + FreqCos4 + Freqsin4 +     lag1 + lag2 + lag3 + lag4 + lag5 + lag6 + lag7 + lag8 + lag9 + lag10 +     lag11 + lag12 + lag13 + lag14 + lag15 + lag16 + lag17 + lag18 + lag19 + lag20 +     lag21 + lag22 + lag23 + lag24 + lag25 + lag26, data = sqlDSTransformed)
trainedmodel <- data.frame(as.raw(serialize(DforestModelObj, connection = NULL)), row.names = "modelinput")
trainedmodel <- data.frame(as.raw(serialize(DforestModelObj, connection = NULL)), row.names = modelinput)
as.raw(serialize(DforestModelObj, connection = NULL))
trainedmodel <- data.frame(as.raw(serialize(DforestModelObj, connection = NULL)), row.names = null)
trainedmodel <- data.frame(as.raw(serialize(DforestModelObj, connection = NULL)), row.names = NULL)
trainedmodel
trainedmodel <- data.frame(as.raw(serialize(DforestModelObj, connection = NULL)), row.names = c("modelcontent"))
trainedmodel <- data.frame(as.raw(serialize(DforestModelObj, connection = NULL)), row.names = null)) colnames(trainedmodel) <- c("content") OutputDataSet <- trainedmodel$content
trainedmodel <- data.frame(as.raw(serialize(DforestModelObj, connection = NULL)), row.names = NULL)) colnames(trainedmodel) <- c("content") OutputDataSet <- trainedmodel$content
trainedmodel <- data.frame(as.raw(serialize(DforestModelObj, connection = NULL)), row.names = NULL)
colnames(trainedmodel) <- c("content")
OutputDataSet <- trainedmodel$content
summary(OutputDataset)
summary(OutputDataSet)
OutputDataSet <- trainedmodel
summary(OutputDataSet)
insert_model_indb(OutputDataSet$content)
rtvs::debug_source("script.R")
insert_model_indb(OutputDataSet$content)
s <- insert_model_indb(OutputDataSet$content)
DforestModelObj <- rxDForest(value ~ RDPI + year + month + weekofmonth +     weekofyear +      FreqCos1 + Freqsin1 + FreqCos2 + Freqsin2 + FreqCos3 + Freqsin3 + FreqCos4 + Freqsin4 +     lag1 + lag2 + lag3 + lag4 + lag5 + lag6 + lag7 + lag8 + lag9 + lag10 +     lag11 + lag12 + lag13 + lag14 + lag15 + lag16 + lag17 + lag18 + lag19 + lag20 +     lag21 + lag22 + lag23 + lag24 + lag25 + lag26, data = sqlDSTransformed) trainedmodel <- data.frame(as.raw(serialize(DforestModelObj, connection = NULL)), row.names = NULL)
sampleDataDir <- "C:\\Users\\srram\\Desktop" readPath <- rxGetOption("sampleDataDir") infile <- file.path(readPath, "Trainingdataset.csv") head(infile)
trainingxdf <- rxImport(inData = infile, outFile = "training.xdf",     overwrite = TRUE)
 rxGetOption("sampleDataDir")
paste0(sampleDataDir, "Trainingdataset.csv")
file.path(paste0(sampleDataDir, "Trainingdataset.csv"))
trainingxdf <- rxImport(inData = infile, outFile = "training.xdf",     overwrite = TRUE)
sampleDataDir <- "C:\\Users\\srram\\Desktop\\" infile <- file.path(paste0(sampleDataDir, "Trainingdataset.csv")) trainingxdf <- rxImport(inData = infile, outFile = "training.xdf",     overwrite = TRUE)
sampleDataDir <- "C:\\Users\\srram\\Desktop\\" infile <- file.path(paste0(sampleDataDir, "Trainingdataset.csv")) trainingxdf <- rxImport(inData = infile, outFile = "C:\\Users\\srram\\Desktop\\training.xdf",     overwrite = TRUE)
colnames(training.xdf)
colnames(trainingxdf)
length(trainingxdf)
data <- RxXdfData(trainingxdf,     varsToKeep = c("horizon", "ID1", "ID2","time","value"), blocksPerRead = 15) rxOpen(data)
summary(data)
rxClose(data)
summary(data)
sqlConnString <- "Driver=SQL Server;Server=srramsql1.southcentralus.cloudapp.azure.com; Database=demo;Uid=srramadmin;Pwd=Lz8oq1dn$Lz1" sqlWait <- TRUE sqlConsoleOutput <- FALSE sqlShareDir <- paste("C:\\Users\\srram\\Documents\\AllShare\\", Sys.getenv("USERNAME"), sep = "") ## Add this line to create directory if it does not exist dir.create(sqlShareDir, recursive = TRUE) sqlComputeTrace <- RxInSqlServer(     connectionString = sqlConnString,     shareDir = sqlShareDir,     wait = sqlWait,     consoleOutput = sqlConsoleOutput,     traceEnabled = TRUE,     traceLevel = 7) rxSetComputeContext(sqlComputeTrace) Query <- "SELECT cast([horizon] as integer) as horizon ,cast([ID1] as integer) as ID1 ,cast([ID2] as integer) as ID2 ,CAST([time] as Date) AS tstamp  ,CAST([value] as decimal(12,8)) AS value ,CAST([RDPI] as decimal(12,1)) AS RDPI ,CAST([year] as integer) as year ,cast([month] as integer) as month ,cast([weekofmonth] as integer) as weekofmonth ,cast([weekofyear] as integer) as weekofyear ,CASE WHEN [USNewYearsDay] = 'False' THEN 0 ELSE 1 END AS USNewYearsDay ,CASE WHEN [USLaborDay] = 'False' THEN 0 ELSE 1 END AS USLaborDay ,CASE WHEN [USThanksgivingDay] = 'False' THEN 0 ELSE 1 END AS USThanksgivingDay ,CASE WHEN [CyberMonday] = 'False' THEN 0 ELSE 1 END AS CyberMonday ,CASE WHEN [ChristmasDay] = 'False' THEN 0 ELSE 1 END AS ChristmasDay ,CAST(SUBSTRING(FreqCos1,1,15) as DECIMAL(15,13)) as FreqCos1 ,CAST(SUBSTRING(Freqsin1,1,15) as DECIMAL(15,13)) as Freqsin1 ,CAST(SUBSTRING(FreqCos2,1,15) as DECIMAL(15,13)) as FreqCos2 ,CAST(SUBSTRING(Freqsin2,1,15) as DECIMAL(15,13)) as Freqsin2 ,CAST(SUBSTRING(FreqCos3,1,15) as DECIMAL(15,13)) as FreqCos3 ,CAST(SUBSTRING(Freqsin3,1,15) as DECIMAL(15,13)) as Freqsin3 ,CAST(SUBSTRING(FreqCos4,1,15) as DECIMAL(15,13)) as FreqCos4 ,CAST(SUBSTRING(Freqsin4,1,15) as DECIMAL(15,13)) as Freqsin4 ,CAST([lag1] as DECIMAL(12,8)) as lag1 ,CAST([lag2] as DECIMAL(12,8)) as lag2 ,CAST([lag3] as DECIMAL(12,8)) as lag3 ,CAST([lag4] as DECIMAL(12,8)) as lag4 ,CAST([lag5] as DECIMAL(12,8)) as lag5 ,CAST([lag6] as DECIMAL(12,8)) as lag6 ,CAST([lag7] as DECIMAL(12,8)) as lag7 ,CAST([lag8] as DECIMAL(12,8)) as lag8 ,CAST([lag9] as DECIMAL(12,8)) as lag9 ,CAST([lag10] as DECIMAL(12,8)) as lag10 ,CAST([lag11] as DECIMAL(12,8)) as lag11 ,CAST([lag12] as DECIMAL(12,8)) as lag12 ,CAST([lag13] as DECIMAL(12,8)) as lag13 ,CAST([lag14] as DECIMAL(12,8)) as lag14 ,CAST([lag15] as DECIMAL(12,8)) as lag15 ,CAST([lag16] as DECIMAL(12,8)) as lag16 ,CAST([lag17] as DECIMAL(12,8)) as lag17 ,CAST([lag18] as DECIMAL(12,8)) as lag18 ,CAST([lag19] as DECIMAL(12,8)) as lag19 ,CAST([lag20] as DECIMAL(12,8)) as lag20 ,CAST([lag21] as DECIMAL(12,8)) as lag21 ,CAST([lag22] as DECIMAL(12,8)) as lag22 ,CAST([lag23] as DECIMAL(12,8)) as lag23 ,CAST([lag24] as DECIMAL(12,8)) as lag24 ,CAST([lag25] as DECIMAL(12,8)) as lag25 ,CAST([lag26] as DECIMAL(12,8)) as lag26 FROM [demo].[dbo].[Trainingdataset] WHERE ID1 = 2 and ID2 = 1 " sqlDSTransformed <- RxSqlServerData(sqlQuery = Query,    connectionString = sqlConnString, rowsPerRead = 5000) rxGetVarInfo(data = sqlDSTransformed) rxSummary( ~ ., data = sqlDSTransformed) DforestModelObj <- rxDForest(value ~ RDPI + year + month + weekofmonth +     weekofyear + USNewYearsDay +     USLaborDay + USThanksgivingDay + CyberMonday + ChristmasDay +     FreqCos1 + Freqsin1 + FreqCos2 + Freqsin2 + FreqCos3 + Freqsin3 + FreqCos4 + Freqsin4 +     lag1 + lag2 + lag3 + lag4 + lag5 + lag6 + lag7 + lag8 + lag9 + lag10 +     lag11 + lag12 + lag13 + lag14 + lag15 + lag16 + lag17 + lag18 + lag19 + lag20 +     lag21 + lag22 + lag23 + lag24 + lag25 + lag26, data = sqlDSTransformed) summary(DforestModelObj) QueryTst <- "SELECT  cast([horizon] as integer) as horizon ,cast([ID1] as integer) as ID1 ,cast([ID2] as integer) as ID2 ,CAST([time] as Date) AS tstamp  ,CAST(value as decimal(12,10)) AS value ,CAST([RDPI] as decimal(12,1)) AS RDPI ,CAST([year] as integer) as year ,cast([month] as integer) as month ,cast([weekofmonth] as integer) as weekofmonth ,cast([weekofyear] as integer) as weekofyear ,CASE WHEN [USNewYearsDay] = 'False' THEN 0 ELSE 1 END AS USNewYearsDay ,CASE WHEN [USLaborDay] = 'False' THEN 0 ELSE 1 END AS USLaborDay ,CASE WHEN [USThanksgivingDay] = 'False' THEN 0 ELSE 1 END AS USThanksgivingDay ,CASE WHEN [CyberMonday] = 'False' THEN 0 ELSE 1 END AS CyberMonday ,CASE WHEN [ChristmasDay] = 'False' THEN 0 ELSE 1 END AS ChristmasDay ,CAST(SUBSTRING(FreqCos1,1,15) as DECIMAL(15,13)) as FreqCos1 ,CAST(SUBSTRING(Freqsin1,1,15) as DECIMAL(15,13)) as Freqsin1 ,CAST(SUBSTRING(FreqCos2,1,15) as DECIMAL(15,13)) as FreqCos2 ,CAST(SUBSTRING(Freqsin2,1,15) as DECIMAL(15,13)) as Freqsin2 ,CAST(SUBSTRING(FreqCos3,1,15) as DECIMAL(15,13)) as FreqCos3 ,CAST(SUBSTRING(Freqsin3,1,15) as DECIMAL(15,13)) as Freqsin3 ,CAST(SUBSTRING(FreqCos4,1,15) as DECIMAL(15,13)) as FreqCos4 ,CAST(SUBSTRING(Freqsin4,1,15) as DECIMAL(15,13)) as Freqsin4 ,CAST([lag1] as DECIMAL(12,8)) as lag1 ,CAST([lag2] as DECIMAL(12,8)) as lag2 ,CAST([lag3] as DECIMAL(12,8)) as lag3 ,CAST([lag4] as DECIMAL(12,8)) as lag4 ,CAST([lag5] as DECIMAL(12,8)) as lag5 ,CAST([lag6] as DECIMAL(12,8)) as lag6 ,CAST([lag7] as DECIMAL(12,8)) as lag7 ,CAST([lag8] as DECIMAL(12,8)) as lag8 ,CAST([lag9] as DECIMAL(12,8)) as lag9 ,CAST([lag10] as DECIMAL(12,8)) as lag10 ,CAST([lag11] as DECIMAL(12,8)) as lag11 ,CAST([lag12] as DECIMAL(12,8)) as lag12 ,CAST([lag13] as DECIMAL(12,8)) as lag13 ,CAST([lag14] as DECIMAL(12,8)) as lag14 ,CAST([lag15] as DECIMAL(12,8)) as lag15 ,CAST([lag16] as DECIMAL(12,8)) as lag16 ,CAST([lag17] as DECIMAL(12,8)) as lag17 ,CAST([lag18] as DECIMAL(12,8)) as lag18 ,CAST([lag19] as DECIMAL(12,8)) as lag19 ,CAST([lag20] as DECIMAL(12,8)) as lag20 ,CAST([lag21] as DECIMAL(12,8)) as lag21 ,CAST([lag22] as DECIMAL(12,8)) as lag22 ,CAST([lag23] as DECIMAL(12,8)) as lag23 ,CAST([lag24] as DECIMAL(12,8)) as lag24 ,CAST([lag25] as DECIMAL(12,8)) as lag25 ,CAST([lag26] as DECIMAL(12,8)) as lag26 FROM [demo].[dbo].[testingdataset] WHERE ID1 = 2 and ID2 = 1 and value <> ''; " sqlDSTest <- RxSqlServerData(sqlQuery = QueryTst,             connectionString = sqlConnString, rowsPerRead = 5000) rxGetVarInfo(data = sqlDSTest) sqlServerOutDS <- RxSqlServerData(table = "Predictions",     connectionString = sqlConnString,     rowsPerRead = 5000) if (rxSqlServerTableExists("Predictions")) rxSqlServerDropTable("Predictions") rxPredict(modelObject = DforestModelObj,             data = sqlDSTest,             outData = sqlServerOutDS,             predVarNames = "DforestScore",             type = "response",             writeModelVars = FALSE,             computeResiduals = TRUE,             extraVarsToWrite = c("tstamp", "value"),             overwrite = TRUE)
